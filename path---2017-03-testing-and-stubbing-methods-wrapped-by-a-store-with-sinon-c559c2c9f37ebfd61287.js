webpackJsonp([33192351582250],{497:function(e,t){e.exports={data:{site:{siteMetadata:{title:"tom (dB) and stuff",author:"Tom de Bruin",twitter:"deadlyhifi"}},markdownRemark:{id:"/Users/deadlyhifi/Code/_github/deadlyhifi/src/pages/2017/03/testing-and-stubbing-methods-wrapped-by-a-store-with-sinon/index.md absPath of file >>> MarkdownRemark",html:'<p>Maybe itâ€™s obvious and thatâ€™s why I didnâ€™t find much about it in my searches, or my search criteria were off, or whatever, but it took me a while to figure it out. Then I keep forgetting and scratch my head for half an hour everytime, so Iâ€™m writing it down.</p>\n<p>Hereâ€™s a simple class, <code class="language-js">MyStore</code>, that needs to do stuff when the <code class="language-js">document.readyState</code> is complete. The default export is wrapped in <a href="http://alt.js.org/docs/createStore/">AltJs createStore</a>.</p>\n<pre><code class="language-js">export MyStore {\n\tconstruct() {\n\t\tif (this.getDocumentReadyState() !== \'complete\') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.userAgent = this.getUserAgent();\n\t\t// do all the things ðŸ¦‹\n\t}\n\n\tgetDocumentReadyState() {\n        \treturn document.readyState;\n\t}\n\n    ...\n}\n\nexport default alt.createStore(MyStore, \'MyStore\');\n</code></pre>\n<h2>Testing</h2>\n<p>The first test here is to make sure nothing happens if the document isnâ€™t ready, so we need to stub <code class="language-js">getDocumentReadyState()</code>. But because the default export is wrapped in <a href="http://alt.js.org">AltJs</a> we canâ€™t get to the actual <code>MyStore</code> to stub the method.</p>\n<p>Make sure <code class="language-js">MyStore</code> is exported as well as the default export, then in your test import <code>MyStore</code> (this is the wrapped one), and also import the unwrapped class.</p>\n<p><code class="language-js">import MyStore, {MyStore as UnwrappedMyStore} from â€™../../../src/stores/MyStoreâ€™;</code></p>\n<p>You can then stub <code class="language-js">getDocumentReadyState</code> from the unwrapped class before firing the event that this store listens to; and make your assertion(s) as appropriate. Iâ€™m using <a href="http://sinonjs.org/releases/v2.3.6/stubs/">Sinon to stub the method</a>.</p>\n<p>Donâ€™t forget to use <code class="language-js">UnwrappedMyStore.prototype</code> to reference the class. <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes">JS classes are just syntactic sugar</a> and add the methods to the prototype.</p>\n<pre><code class="language-js">documentReadyState = sinon.stub(\n\tUnwrappedMyStore.prototype,\n\t\'getDocumentReadyState\'\n).returns(\'interactive\');\n\n// dispatch action\n\nchai.expect(MyStore.getState().userAgent).to.be.undefined;\n</code></pre>\n<p><a href="https://stackoverflow.com/questions/21072016/stubbing-a-class-method-with-sinon-js">stackoverflow - stubbing-a-class-method-with-sinon-js</a> helped me figure it out.</p>',frontmatter:{title:'Testing and stubbing methods wrapped by a "store"',date:"October 03, 2017"}}},pathContext:{slug:"/2017/03/testing-and-stubbing-methods-wrapped-by-a-store-with-sinon/",previous:{fields:{slug:"/2017/03/on-refactoring/default/"},frontmatter:{title:"On Refactoring"}},next:!1}}}});
//# sourceMappingURL=path---2017-03-testing-and-stubbing-methods-wrapped-by-a-store-with-sinon-c559c2c9f37ebfd61287.js.map